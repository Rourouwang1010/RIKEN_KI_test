#Task7_1
> install.packages("remotes")
trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/remotes_2.5.0.tgz'
Content type 'application/x-gzip' length 431784 bytes (421 KB)
==================================================
downloaded 421 KB


The downloaded binary packages are in
	/var/folders/k5/vl1gr2fs5x12gm1hhbqch7pw0000gn/T//RtmprwpW1K/downloaded_packages
> library(remotes)
> install_url("http://emotion.utu.fi/wp-content/uploads/2019/11/nummenmaa_1.0.tar.gz",dependencies=TRUE)
Downloading package from url: http://emotion.utu.fi/wp-content/uploads/2019/11/nummenmaa_1.0.tar.gz
These packages have more recent versions available.
It is recommended to update all of them.
Which would you like to update?

1: All                            
2: CRAN packages only             
3: None                           
4: rmarkdown (2.29 -> 2.30) [CRAN]

Enter one or more numbers, or an empty line to skip updates: 1
rmarkdown (2.29 -> 2.30) [CRAN]
Installing 1 packages: rmarkdown
trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/rmarkdown_2.29.tgz'
Content type 'application/x-gzip' length 2632006 bytes (2.5 MB)
==================================================
downloaded 2.5 MB


The downloaded binary packages are in
	/var/folders/k5/vl1gr2fs5x12gm1hhbqch7pw0000gn/T//RtmprwpW1K/downloaded_packages
── R CMD build ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
✔  checking for file ‘/private/var/folders/k5/vl1gr2fs5x12gm1hhbqch7pw0000gn/T/RtmprwpW1K/remotes45adc18fa38/nummenmaa/DESCRIPTION’ ...
─  preparing ‘nummenmaa’:
✔  checking DESCRIPTION meta-information ...
─  checking for LF line-endings in source and make files and shell scripts
─  checking for empty or unneeded directories
─  building ‘nummenmaa_1.0.tar.gz’
   
* installing *source* package ‘nummenmaa’ ...
** this is package ‘nummenmaa’ version ‘1.0’
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (nummenmaa)
> library(ggplot2)
> df <- read.csv(file.choose(), stringsAsFactors = FALSE) #read files
> str(df) #data composation
'data.frame':	100 obs. of  4 variables:
 $ uniqId : chr  "p1" "p2" "p3" "p4" ...
 $ species: chr  "jedi" "jedi" "jedi" "jedi" ...
 $ length : num  175 252 230 176 213 ...
 $ weight : num  71.3 70.8 70.7 80.4 82 64.2 71.8 75 74.3 72.8 ...
> head(df) # name of row and column
  uniqId species length weight
1     p1    jedi  174.6   71.3
2     p2    jedi  252.2   70.8
3     p3    jedi  229.8   70.7
4     p4    jedi  176.2   80.4
5     p5    jedi  213.3   82.0
6     p6    jedi  112.5   64.2
> names(df) # name of column
[1] "uniqId"  "species" "length"  "weight" 
> names(df)[names(df)=="length"] <- "height" #change the name
> names(df) #check name
[1] "uniqId"  "species" "height"  "weight" 
> df$species <- as.factor(df$species) #clean data to make sure that the data type is correct
> df$height  <- as.numeric(df$height)
> # remain two colums as species and height
> df <- df[ , c("species","height")]
> df <- na.omit(df)
> ## ========== 1) base R: hist() ==========
> ## 1.1 Draw a histogram for each species 
> par(mfrow = c(1, 2), mar = c(4,4,2,1))
> sp <- levels(df$species)
> library(readr)
> names(df)
[1] "species" "height" 
> h <- df$height
> if (is.factor(h)) h <- as.character(h)
> for (i in seq_along(sp)) {
+   x <- df$height[df$species == sp[i]]
+   hist(x,
+        main = paste("height -", sp[i]),
+        xlab = "height",
+        col  = "gray80",
+        border = "white",
+        breaks = "FD")      # try "FD"、"Sturges"、or numeric value like 20
+   lines(density(x), lwd = 2)  # opthinal
+ }
> par(mfrow = c(1,1))
>  ## 1.2 overlay by species
> h_min <- min(df$height); h_max <- max(df$height)
> brks  <- seq(h_min, h_max, length.out = 30)   # try different breaks：20/30/40
> x1 <- df$height[df$species == sp[1]]
> x2 <- df$height[df$species == sp[2]]
> hist(x1, breaks = brks, col = rgb(0.2,0.5,0.9,0.4), border="white",
+      xlab = "Height", main = "Overlay by species")
> hist(x2, breaks = brks, col = rgb(0.9,0.3,0.3,0.4), border="white", add=TRUE)
> legend("topright", fill = c(rgb(0.2,0.5,0.9,0.4), rgb(0.9,0.3,0.3,0.4)),
+        legend = sp, bty = "n")
> ## ========== 2) ggplot2: geom_histogram() ==========
> # 2.1 species one by one
> p1 <- ggplot(df, aes(x = height)) +
+   geom_histogram(aes(y = after_stat(density)),
+                  bins = 30,        # try bins = 20/30/40 or set binwidth
+                  color = "white", fill = "#6baed6") +
+   geom_density(linewidth = 1.1) +
+   facet_wrap(~ species, nrow = 1) +
+   labs(title = "Height distributions by species",
+        x = "Height", y = "Density") +
+   theme_minimal(base_size = 12)
> p1
> # 2.2 overley by species
> p2 <- ggplot(df, aes(x = height, fill = species, color = species)) +
+   geom_histogram(position = "identity", alpha = 0.4,
+                  bins = 30) +   # or binwidth = diff(range(height))/30
+   labs(title = "Overlayed histograms by species",
+        x = "Height", y = "Count") +
+   theme_minimal(base_size = 12)
> p2
> # 2.3 “custom breaks”（binwidth）
> rng <- range(df$height)
> binwidth <- diff(rng) / 25      # try 15/25/40
> p3 <- ggplot(df, aes(x = height, fill = species)) +
+   geom_histogram(position = "identity", alpha = 0.5,
+                  binwidth = binwidth, color = "white") +
+   labs(title = paste0("Custom binwidth = ", round(binwidth, 2)),
+        x = "Height", y = "Count") +
+   theme_minimal(base_size = 12)
> p3
>  ## ---------- A) base R：box plot ----------
> graphics.off()  #close previous fig
> par(mar = c(4,4,2,1))
> boxplot(height ~ species, data = dat,
+         notch = TRUE, outline = TRUE,
+         col = "gray90", border = "gray40",
+         xlab = "Species", ylab = "Height",
+         main = "height by species (base R)")
> stripchart(height ~ species, data = dat,
+            vertical = TRUE, method = "jitter",
+            pch = 19, col = rgb(0,0,0,0.4), add = TRUE)
## ---------- B) ggplot2：geom_boxplot ----------
> stopifnot(exists("df"))
> height_col  <- grep("height|stature", names(df), ignore.case = TRUE, value = TRUE)[1]
> species_col <- grep("species|type|group", names(df), ignore.case = TRUE, value = TRUE)[1]
> stopifnot(!is.na(height_col), !is.na(species_col))
> h <- df[[height_col]]
> if (!is.numeric(h)) {
+   h <- as.character(h)
+   h <- gsub("[^0-9,.-]", "", h)  
+   h <- gsub(",", ".", h)         
+   h <- suppressWarnings(as.numeric(h))
+ }
> dat <- data.frame(
+   species = factor(df[[species_col]]),
+   height  = h
+ )
> dat <- dat[is.finite(dat$height), ]
> library(ggplot2)
> ggplot(dat, aes(x = species, y = height, fill = species)) +
+   geom_boxplot(width = 0.6, outlier.shape = 21, outlier.alpha = 0.6) +
+   stat_summary(fun = mean, geom = "point", shape = 23, size = 2.2, fill = "white") +
+   labs(title = "Body height by species", x = "Species", y = "Height") +
+   theme_minimal(base_size = 12) +
+   theme(legend.position = "none")
> 
#Task7_2
> library(data.table)
data.table 1.17.8 using 4 threads (see ?getDTthreads).  Latest news: r-datatable.com
> library(ggplot2)
> path <- "/Users/rui/Desktop/研究相关定题材料/KI-SciLifelab/microarray_data.tab"
> file.exists(path)       
[1] TRUE
> dt <- fread(path, sep = "\t", na.strings = c("", "NA", "NaN", "NULL"))
> gene_ids <- as.character(dt[[1]])
> X <- as.matrix(as.data.frame(lapply(dt[, -1], as.numeric)))
> rownames(X) <- make.unique(gene_ids)
> ## ========== a) how big is the matrix ==========
> cat("Rows(genes) =", nrow(X), "  Cols(samples) =", ncol(X), "\n")
Rows(genes) = 553   Cols(samples) = 999 
> ## ========== b) missing values per gen and visualize==========
> na_per_gene   <- rowSums(is.na(X))
> pct_per_gene  <- na_per_gene / ncol(X) * 100
> g <- rownames(X)
> if (is.null(g)) g <- paste0("gene_", seq_len(nrow(X)))
> bad <- which(is.na(g) | g == "")
> if (length(bad)) g[bad] <- paste0("gene_", bad)
> df_miss <- data.frame(
+   gene = g,
+   NA_count = na_per_gene,
+   NA_pct = pct_per_gene,
+   row.names = NULL 
+ )
> head(df_miss, 5)
    gene NA_count    NA_pct
1  1.802       72  7.207207
2 gene_2      225 22.522523
3  1.079       72  7.207207
4  3.607       74  7.407407
5   -1.7      126 12.612613
> > # visualize Histogram
> hist(pct_per_gene, breaks = 40, main = "Missing % per gene",
+      xlab = "Percent missing", col = "gray80", border = "white")
> library(ggplot2) #use ggplot
> df_miss <- data.frame(pct = unname(pct_per_gene)) 
> ggplot(df_miss, aes(pct)) +
+   geom_histogram(bins = 40, color = "white") +
+   labs(title = "Missing % per gene", x = "Percent missing", y = "Count") +
+   theme_minimal()
> ## ========== c) more than X%(10/20/50) missing values ==========
> thr <- c(10, 20, 50)
> genes_over <- lapply(thr, function(t) rownames(X)[pct_per_gene > t])
> names(genes_over) <- paste0("over_", thr, "pct")
> sapply(genes_over, length) #numbers of values
over_10pct over_20pct over_50pct 
       346        236          8 
> #find the gene name of missing values
> head(genes_over$over_20pct, 10)
 [1] NA      "NA.2"  "NA.9"  "NA.10" "NA.11" "NA.12" "NA.14" "1.951" "NA.15" "1.333"
> head(genes_over$over_20pct, 20)
 [1] NA       "NA.2"   "NA.9"   "NA.10"  "NA.11"  "NA.12"  "NA.14"  "1.951"  "NA.15"  "1.333"  "-0.468" "0.359"  "0.157"  "-0.047"
[15] "0.071"  "-0.663" "0.01"   "-0.087" "0.186"  "0.509" 
> head(genes_over$over_20pct, 50)
 [1] NA        "NA.2"    "NA.9"    "NA.10"   "NA.11"   "NA.12"   "NA.14"   "1.951"   "NA.15"   "1.333"   "-0.468"  "0.359"   "0.157"  
[14] "-0.047"  "0.071"   "-0.663"  "0.01"    "-0.087"  "0.186"   "0.509"   "0.022"   "-0.848"  "0.868"   "0.807"   "0.084"   "0.406"  
[27] "0.771"   "0.64"    "0.438"   "-0.138"  "-0.391"  "0.387"   "0.683"   "-6.21"   "0.284"   "-0.2"    "0.1"     "0.585"   "0.387.1"
[40] "NA.16"   "0.316"   "NA.17"   "0.819"   "1.376"   "0.62"    "0.507"   "0.209"   "-0.01"   "1.28"    "0.302"  
> ## ========== d) replace the missing values bu average expression ==========
> row_means <- rowMeans(X, na.rm = TRUE) # if all row is NA, change to NaN
> X_imp <- X
> idx_na <- which(is.na(X_imp), arr.ind = TRUE)
> X_imp[idx_na] <- row_means[idx_na[,1]] # replace the missing values bu average expression
> all_na_rows <- which(!is.finite(row_means))
> if (length(all_na_rows) > 0) {
+   message(length(all_na_rows), " genes are all-NA; left as NA (no imputation possible).")
+ }
2 genes are all-NA; left as NA (no imputation possible).
> 




